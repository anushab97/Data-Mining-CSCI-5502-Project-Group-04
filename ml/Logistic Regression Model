# Logistic Regression Model for Classification

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics


# Read the features file along with given class label for each record
fileName1 = "C:/Users/Shiva/Documents/Anusha Assignments/Data Mining Project/CTU-13-features/features/1_capture20110810_features.csv"
colNames = ['Dur', 'Proto', 'Dport', 'TotPkts', 'DstAddr_octet1', 'DstAddr_octet2', 'DstAddr_octet3',
                 'DstAddr_octet4', 'botnet']
dfRaw = pd.read_csv(fileName1, delimiter=",", header=None, names=colNames, skiprows=1, low_memory=False)

dfRaw['Dport'] = pd.to_numeric(dfRaw['Dport'], errors='coerce')  # To replace non-numeric values to 'NaN'
dfRaw['DstAddr_octet1'] = pd.to_numeric(dfRaw['DstAddr_octet1'], errors='coerce')
count1 = dfRaw["Dport"].isna().sum()    # Count no. of 'NaN' values in given column
count2 = dfRaw["DstAddr_octet1"].isna().sum()

print(dfRaw.dtypes)
#print(dfRaw.iloc[137])
print("No. of 'Dport' rows with 'NaN' values:", count1)
print("No. of 'DstAddr_octet1' rows with 'NaN' values:", count2)
#print("Df before deletion:")
#print(dfRaw)
dfRaw = dfRaw.dropna()
dfRaw = dfRaw.reset_index(drop = True)
df = dfRaw
#print("Df after deletion:")
#print(dfRaw)
#print(df)

"""
# Data type of columns in dataset
dtype={'Dur': 'float', 'Proto': 'float', 'Dport': 'float', 'TotPkts': 'float',
                                  'DstAddr_octet1': 'float', 'DstAddr_octet2': 'float', 'DstAddr_octet3': 'float',
                                  'DstAddr_octet4': 'float', 'botnet': 'int'}
"""


# Split dataset into features and target variable (or features and class label)
#df = df.sample(frac = 1)    #Shuffling the dataframe rows before splitting
fatureColumns = ['Dur', 'Proto', 'Dport', 'TotPkts', 'DstAddr_octet1', 'DstAddr_octet2', 'DstAddr_octet3',
                 'DstAddr_octet4']
X = df[fatureColumns]
y = df.botnet

# print(X)
# print(y)


# Split the defined Features dataset into Training and Test set (55% - 45%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.45,  random_state=100)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)


# instantiate the model (using the default parameters)
logReg = LogisticRegression()

# fit the model with data
logReg.fit(X_train, y_train)

# Predicting the class label on the TestSet
y_pred = logReg.predict(X_test)

# Generating Confusion Matrix on Actual Vs Predicted Class labels
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
print(cnf_matrix)

